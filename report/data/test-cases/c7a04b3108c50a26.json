{
  "uid" : "c7a04b3108c50a26",
  "name" : "test_newly",
  "fullName" : "testcase.test_19.TestProcurementType#test_newly",
  "historyId" : "a7f8e85f6dfb2b3ff48d0e3bdf640cac",
  "time" : {
    "start" : 1616465393557,
    "stop" : 1616465393772,
    "duration" : 215
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
  "statusTrace" : "self = <test_19.TestProcurementType object at 0x047545D0>\n\n    def test_newly(self):\n        self.lab = gl.get_value('lab')\n        self.caseid = '%s-19' % (self.lab)\n        self.ip = gl.get_value('apiip')\n        self.testplanid = gl.get_value('test_plan_id')\n        self.token = gl.get_value('Cookie')\n    \n        # 测试API地址\n        self.url = '% smethod=finance.confirmPayment'% (self.ip)\n        print(self.url)\n        self.payloadData ={\n                                \"style\": 1,\n                                \"code\": 202103080021,\n                                \"hasInvoice\": True,\n                                \"invoiceCode\": \"111111\",\n                                \"amount\": \"500\",\n                                \"remark\": \"\"\n                            }\n    \n        self.payloadHeader = {\n            'Content-Type': \"application/json\",\n            'Cookie': self.token\n        }\n        #打印requests\n        self.data = json.dumps(self.payloadData)\n        self.headers = self.payloadHeader\n        ul.log.logger.info(\"%s is open!~~~~~~~~~~~~~~~~~~~~~~~~~~~~\" % (self.caseid))\n    \n        r = requests.request(\"POST\", url=self.url, headers=self.payloadHeader, data=self.data,verify=False)\n    \n        print(r.json())\n        ul.log.logger.info(r)\n    \n        # 断言\n>       assert r.json()['result'] == 0\nE       assert 10000 == 0\nE         +10000\nE         -0\n\ntestcase\\test_19.py:54: AssertionError",
  "flaky" : true,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
    "statusTrace" : "self = <test_19.TestProcurementType object at 0x047545D0>\n\n    def test_newly(self):\n        self.lab = gl.get_value('lab')\n        self.caseid = '%s-19' % (self.lab)\n        self.ip = gl.get_value('apiip')\n        self.testplanid = gl.get_value('test_plan_id')\n        self.token = gl.get_value('Cookie')\n    \n        # 测试API地址\n        self.url = '% smethod=finance.confirmPayment'% (self.ip)\n        print(self.url)\n        self.payloadData ={\n                                \"style\": 1,\n                                \"code\": 202103080021,\n                                \"hasInvoice\": True,\n                                \"invoiceCode\": \"111111\",\n                                \"amount\": \"500\",\n                                \"remark\": \"\"\n                            }\n    \n        self.payloadHeader = {\n            'Content-Type': \"application/json\",\n            'Cookie': self.token\n        }\n        #打印requests\n        self.data = json.dumps(self.payloadData)\n        self.headers = self.payloadHeader\n        ul.log.logger.info(\"%s is open!~~~~~~~~~~~~~~~~~~~~~~~~~~~~\" % (self.caseid))\n    \n        r = requests.request(\"POST\", url=self.url, headers=self.payloadHeader, data=self.data,verify=False)\n    \n        print(r.json())\n        ul.log.logger.info(r)\n    \n        # 断言\n>       assert r.json()['result'] == 0\nE       assert 10000 == 0\nE         +10000\nE         -0\n\ntestcase\\test_19.py:54: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "1676b89ff3223000",
      "name" : "log",
      "source" : "1676b89ff3223000.txt",
      "type" : "text/plain",
      "size" : 201
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "测试用例19"
  }, {
    "name" : "parentSuite",
    "value" : "testcase"
  }, {
    "name" : "suite",
    "value" : "test_19"
  }, {
    "name" : "subSuite",
    "value" : "TestProcurementType"
  }, {
    "name" : "host",
    "value" : "DESKTOP-JR3NDOU"
  }, {
    "name" : "thread",
    "value" : "217404-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.test_19"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "ba898e3de2c1a7d8",
      "status" : "broken",
      "statusDetails" : "requests.exceptions.SSLError: HTTPSConnectionPool(host='tgnew-test.icy.design', port=443): Max retries exceeded with url: /api/tg/admin.php?method=finance.confirmPayment (Caused by SSLError(SSLError(1, '[SSL: UNKNOWN_PROTOCOL] unknown protocol (_ssl.c:777)'),))",
      "time" : {
        "start" : 1616464826317,
        "stop" : 1616464826325,
        "duration" : 8
      }
    }, {
      "uid" : "67bf06a596232410",
      "status" : "broken",
      "statusDetails" : "requests.exceptions.SSLError: HTTPSConnectionPool(host='tgnew-test.icy.design', port=443): Max retries exceeded with url: /api/tg/admin.php?method=finance.confirmPayment (Caused by SSLError(SSLError(1, '[SSL: UNKNOWN_PROTOCOL] unknown protocol (_ssl.c:777)'),))",
      "time" : {
        "start" : 1616464031652,
        "stop" : 1616464031659,
        "duration" : 7
      }
    }, {
      "uid" : "75c28537caaecadd",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615888323217,
        "stop" : 1615888323479,
        "duration" : 262
      }
    }, {
      "uid" : "df8396ed391982fc",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 2 == 0\n  +2\n  -0",
      "time" : {
        "start" : 1615888163146,
        "stop" : 1615888163374,
        "duration" : 228
      }
    }, {
      "uid" : "60e27442e5edb9a4",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615861550597,
        "stop" : 1615861550824,
        "duration" : 227
      }
    }, {
      "uid" : "bc235b92747fc43a",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 2 == 0\n  +2\n  -0",
      "time" : {
        "start" : 1615860548991,
        "stop" : 1615860549435,
        "duration" : 444
      }
    }, {
      "uid" : "394f378c16e185d",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 2 == 0\n  +2\n  -0",
      "time" : {
        "start" : 1615859931307,
        "stop" : 1615859931666,
        "duration" : 359
      }
    }, {
      "uid" : "d551922fb2b5d872",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615286187858,
        "stop" : 1615286188150,
        "duration" : 292
      }
    }, {
      "uid" : "6f13755fb4a7ffb3",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615285808842,
        "stop" : 1615285810780,
        "duration" : 1938
      }
    }, {
      "uid" : "739d2cc3af164f3b",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615283534662,
        "stop" : 1615283534962,
        "duration" : 300
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "c7a04b3108c50a26.json",
  "parameterValues" : [ ]
}