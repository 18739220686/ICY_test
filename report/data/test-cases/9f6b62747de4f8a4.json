{
  "uid" : "9f6b62747de4f8a4",
  "name" : "test_newly",
  "fullName" : "testcase.test_17.TestProcurementType#test_newly",
  "historyId" : "236029e396351b1afea888c80b52afb6",
  "time" : {
    "start" : 1616465393042,
    "stop" : 1616465393265,
    "duration" : 223
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
  "statusTrace" : "self = <test_17.TestProcurementType object at 0x0451E6F0>\n\n    def test_newly(self):\n        self.lab = gl.get_value('lab')\n        self.caseid = '%s-17' % (self.lab)\n        self.ip = gl.get_value('apiip')\n        self.testplanid = gl.get_value('test_plan_id')\n        self.token = gl.get_value('Cookie')\n    \n        # 测试API地址\n        self.url = '% smethod=purchase.updateFormStatus'% (self.ip)\n        print(self.url)\n        self.payloadData ={\n                            \"formIdList\": [\"202103080070\"],\n                            \"action\": 6,\n                            \"rejectReason\": \"\"\n                        }\n    \n        self.payloadHeader = {\n            'Content-Type': \"application/json\",\n            'Cookie': self.token\n        }\n        #打印requests\n        self.data = json.dumps(self.payloadData)\n        self.headers = self.payloadHeader\n        ul.log.logger.info(\"%s is open!~~~~~~~~~~~~~~~~~~~~~~~~~~~~\" % (self.caseid))\n    \n        r = requests.request(\"POST\", url=self.url, headers=self.payloadHeader, data=self.data,verify=False)\n    \n        print(r.json())\n        ul.log.logger.info(r)\n    \n        # 断言\n>       assert r.json()['result'] == 0\nE       assert 10000 == 0\nE         +10000\nE         -0\n\ntestcase\\test_17.py:52: AssertionError",
  "flaky" : true,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
    "statusTrace" : "self = <test_17.TestProcurementType object at 0x0451E6F0>\n\n    def test_newly(self):\n        self.lab = gl.get_value('lab')\n        self.caseid = '%s-17' % (self.lab)\n        self.ip = gl.get_value('apiip')\n        self.testplanid = gl.get_value('test_plan_id')\n        self.token = gl.get_value('Cookie')\n    \n        # 测试API地址\n        self.url = '% smethod=purchase.updateFormStatus'% (self.ip)\n        print(self.url)\n        self.payloadData ={\n                            \"formIdList\": [\"202103080070\"],\n                            \"action\": 6,\n                            \"rejectReason\": \"\"\n                        }\n    \n        self.payloadHeader = {\n            'Content-Type': \"application/json\",\n            'Cookie': self.token\n        }\n        #打印requests\n        self.data = json.dumps(self.payloadData)\n        self.headers = self.payloadHeader\n        ul.log.logger.info(\"%s is open!~~~~~~~~~~~~~~~~~~~~~~~~~~~~\" % (self.caseid))\n    \n        r = requests.request(\"POST\", url=self.url, headers=self.payloadHeader, data=self.data,verify=False)\n    \n        print(r.json())\n        ul.log.logger.info(r)\n    \n        # 断言\n>       assert r.json()['result'] == 0\nE       assert 10000 == 0\nE         +10000\nE         -0\n\ntestcase\\test_17.py:52: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "c67ae642cabcdc78",
      "name" : "log",
      "source" : "c67ae642cabcdc78.txt",
      "type" : "text/plain",
      "size" : 201
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "测试用例17"
  }, {
    "name" : "parentSuite",
    "value" : "testcase"
  }, {
    "name" : "suite",
    "value" : "test_17"
  }, {
    "name" : "subSuite",
    "value" : "TestProcurementType"
  }, {
    "name" : "host",
    "value" : "DESKTOP-JR3NDOU"
  }, {
    "name" : "thread",
    "value" : "217404-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.test_17"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "c229ebed34c7160b",
      "status" : "broken",
      "statusDetails" : "requests.exceptions.SSLError: HTTPSConnectionPool(host='tgnew-test.icy.design', port=443): Max retries exceeded with url: /api/tg/admin.php?method=purchase.updateFormStatus (Caused by SSLError(SSLError(1, '[SSL: UNKNOWN_PROTOCOL] unknown protocol (_ssl.c:777)'),))",
      "time" : {
        "start" : 1616464826021,
        "stop" : 1616464826028,
        "duration" : 7
      }
    }, {
      "uid" : "ce84efac3d293fb3",
      "status" : "broken",
      "statusDetails" : "requests.exceptions.SSLError: HTTPSConnectionPool(host='tgnew-test.icy.design', port=443): Max retries exceeded with url: /api/tg/admin.php?method=purchase.updateFormStatus (Caused by SSLError(SSLError(1, '[SSL: UNKNOWN_PROTOCOL] unknown protocol (_ssl.c:777)'),))",
      "time" : {
        "start" : 1616464031353,
        "stop" : 1616464031361,
        "duration" : 8
      }
    }, {
      "uid" : "fc8f840c8442b3aa",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615888322053,
        "stop" : 1615888322303,
        "duration" : 250
      }
    }, {
      "uid" : "bb0308d25724421",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 2 == 0\n  +2\n  -0",
      "time" : {
        "start" : 1615888162684,
        "stop" : 1615888162905,
        "duration" : 221
      }
    }, {
      "uid" : "fa285a19b8aa6c10",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615861550006,
        "stop" : 1615861550235,
        "duration" : 229
      }
    }, {
      "uid" : "1bd26c7845f75192",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 2 == 0\n  +2\n  -0",
      "time" : {
        "start" : 1615860548061,
        "stop" : 1615860548504,
        "duration" : 443
      }
    }, {
      "uid" : "c9e1f7a34493aabc",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 2 == 0\n  +2\n  -0",
      "time" : {
        "start" : 1615859930357,
        "stop" : 1615859930847,
        "duration" : 490
      }
    }, {
      "uid" : "14fc9718d33ae411",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615286186463,
        "stop" : 1615286187557,
        "duration" : 1094
      }
    }, {
      "uid" : "53cdc5124caa2535",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615285805950,
        "stop" : 1615285806191,
        "duration" : 241
      }
    }, {
      "uid" : "61395c37e5d94043",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615283534193,
        "stop" : 1615283534384,
        "duration" : 191
      }
    }, {
      "uid" : "8f3d4e3d363e5290",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615283056412,
        "stop" : 1615283057171,
        "duration" : 759
      }
    }, {
      "uid" : "9c6cb1528e40b4b0",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615282894163,
        "stop" : 1615282894393,
        "duration" : 230
      }
    }, {
      "uid" : "ad572ca2baf590ef",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615281973231,
        "stop" : 1615281973442,
        "duration" : 211
      }
    }, {
      "uid" : "8afc3a2286ca5063",
      "status" : "broken",
      "statusDetails" : "requests.exceptions.SSLError: HTTPSConnectionPool(host='tgnew-test.icy.design', port=443): Max retries exceeded with url: /api/tg/admin.php?method=finance.confirmPayment (Caused by SSLError(SSLError(1, '[SSL: UNKNOWN_PROTOCOL] unknown protocol (_ssl.c:777)'),))",
      "time" : {
        "start" : 1615281939377,
        "stop" : 1615281939385,
        "duration" : 8
      }
    }, {
      "uid" : "a5afbc3fb602bd58",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615269133192,
        "stop" : 1615269133432,
        "duration" : 240
      }
    }, {
      "uid" : "df6cc3e46f239859",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615262311954,
        "stop" : 1615262312209,
        "duration" : 255
      }
    }, {
      "uid" : "faeb12cec8761a7d",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615199832353,
        "stop" : 1615199832606,
        "duration" : 253
      }
    }, {
      "uid" : "c13fb587aca2f063",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615199775954,
        "stop" : 1615199776225,
        "duration" : 271
      }
    }, {
      "uid" : "54dd36dee5ceb735",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615199701728,
        "stop" : 1615199707606,
        "duration" : 5878
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "9f6b62747de4f8a4.json",
  "parameterValues" : [ ]
}