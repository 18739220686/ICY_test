{
  "uid" : "7dea5d95df70c763",
  "name" : "test_newly",
  "fullName" : "testcase.test_14.TestProcurementType#test_newly",
  "historyId" : "0c2cae34004194a9517e836584365852",
  "time" : {
    "start" : 1616465391756,
    "stop" : 1616465392429,
    "duration" : 673
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
  "statusTrace" : "self = <test_14.TestProcurementType object at 0x0437FDF0>\n\n    def test_newly(self):\n        self.lab = gl.get_value('lab')\n        self.caseid = '%s-14' % (self.lab)\n        self.ip = gl.get_value('apiip')\n        self.testplanid = gl.get_value('test_plan_id')\n        self.token = gl.get_value('Cookie')\n    \n        # 测试API地址\n        self.url = '% smethod=finance.getPurchasePaymentApplyInfo&purchaseId=1556274479'% (self.ip)\n        print(self.url)\n        self.payloadData ={\n    \n                    }\n    \n        self.payloadHeader = {\n            'Content-Type': \"application/json\",\n            'Cookie': self.token\n        }\n        #打印requests\n        self.data = json.dumps(self.payloadData)\n        self.headers = self.payloadHeader\n        ul.log.logger.info(\"%s is open!~~~~~~~~~~~~~~~~~~~~~~~~~~~~\" % (self.caseid))\n    \n        r = requests.request(\"get\", url=self.url, headers=self.payloadHeader, data=self.data,verify=False)\n    \n        print(r.json())\n        ul.log.logger.info(r)\n    \n        # 断言\n>       assert r.json()['result'] == 0\nE       assert 10000 == 0\nE         +10000\nE         -0\n\ntestcase\\test_14.py:50: AssertionError",
  "flaky" : true,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
    "statusTrace" : "self = <test_14.TestProcurementType object at 0x0437FDF0>\n\n    def test_newly(self):\n        self.lab = gl.get_value('lab')\n        self.caseid = '%s-14' % (self.lab)\n        self.ip = gl.get_value('apiip')\n        self.testplanid = gl.get_value('test_plan_id')\n        self.token = gl.get_value('Cookie')\n    \n        # 测试API地址\n        self.url = '% smethod=finance.getPurchasePaymentApplyInfo&purchaseId=1556274479'% (self.ip)\n        print(self.url)\n        self.payloadData ={\n    \n                    }\n    \n        self.payloadHeader = {\n            'Content-Type': \"application/json\",\n            'Cookie': self.token\n        }\n        #打印requests\n        self.data = json.dumps(self.payloadData)\n        self.headers = self.payloadHeader\n        ul.log.logger.info(\"%s is open!~~~~~~~~~~~~~~~~~~~~~~~~~~~~\" % (self.caseid))\n    \n        r = requests.request(\"get\", url=self.url, headers=self.payloadHeader, data=self.data,verify=False)\n    \n        print(r.json())\n        ul.log.logger.info(r)\n    \n        # 断言\n>       assert r.json()['result'] == 0\nE       assert 10000 == 0\nE         +10000\nE         -0\n\ntestcase\\test_14.py:50: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "20518be3444bbfdf",
      "name" : "log",
      "source" : "20518be3444bbfdf.txt",
      "type" : "text/plain",
      "size" : 201
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "测试用例14"
  }, {
    "name" : "parentSuite",
    "value" : "testcase"
  }, {
    "name" : "suite",
    "value" : "test_14"
  }, {
    "name" : "subSuite",
    "value" : "TestProcurementType"
  }, {
    "name" : "host",
    "value" : "DESKTOP-JR3NDOU"
  }, {
    "name" : "thread",
    "value" : "217404-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.test_14"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "a63850cc4c423c3",
      "status" : "broken",
      "statusDetails" : "requests.exceptions.SSLError: HTTPSConnectionPool(host='tgnew-test.icy.design', port=443): Max retries exceeded with url: /api/tg/admin.php?method=finance.getPurchasePaymentApplyInfo&purchaseId=1556274479 (Caused by SSLError(SSLError(1, '[SSL: UNKNOWN_PROTOCOL] unknown protocol (_ssl.c:777)'),))",
      "time" : {
        "start" : 1616464825563,
        "stop" : 1616464825571,
        "duration" : 8
      }
    }, {
      "uid" : "b0ae9dabe046fa7c",
      "status" : "broken",
      "statusDetails" : "requests.exceptions.SSLError: HTTPSConnectionPool(host='tgnew-test.icy.design', port=443): Max retries exceeded with url: /api/tg/admin.php?method=finance.getPurchasePaymentApplyInfo&purchaseId=1556274479 (Caused by SSLError(SSLError(1, '[SSL: UNKNOWN_PROTOCOL] unknown protocol (_ssl.c:777)'),))",
      "time" : {
        "start" : 1616464030905,
        "stop" : 1616464030914,
        "duration" : 9
      }
    }, {
      "uid" : "9ba14e1c9097b2c3",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615888320659,
        "stop" : 1615888321020,
        "duration" : 361
      }
    }, {
      "uid" : "630f418e3fbfcbcf",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 2 == 0\n  +2\n  -0",
      "time" : {
        "start" : 1615888161926,
        "stop" : 1615888162158,
        "duration" : 232
      }
    }, {
      "uid" : "c9254df17911e0ee",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615861548237,
        "stop" : 1615861548690,
        "duration" : 453
      }
    }, {
      "uid" : "e39ab24d50073743",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 2 == 0\n  +2\n  -0",
      "time" : {
        "start" : 1615860546568,
        "stop" : 1615860547087,
        "duration" : 519
      }
    }, {
      "uid" : "c975c8679bf257cf",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 2 == 0\n  +2\n  -0",
      "time" : {
        "start" : 1615859928572,
        "stop" : 1615859929159,
        "duration" : 587
      }
    }, {
      "uid" : "2a98b89986c99a75",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615286184364,
        "stop" : 1615286184664,
        "duration" : 300
      }
    }, {
      "uid" : "ad8703630dfeb20",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615285800627,
        "stop" : 1615285803450,
        "duration" : 2823
      }
    }, {
      "uid" : "19573b4109408fe4",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615283533464,
        "stop" : 1615283533715,
        "duration" : 251
      }
    }, {
      "uid" : "a1491f97c5c22481",
      "status" : "passed",
      "time" : {
        "start" : 1615283055311,
        "stop" : 1615283055816,
        "duration" : 505
      }
    }, {
      "uid" : "d5db79b91c242799",
      "status" : "passed",
      "time" : {
        "start" : 1615282893324,
        "stop" : 1615282893613,
        "duration" : 289
      }
    }, {
      "uid" : "a043ac3cf139181",
      "status" : "passed",
      "time" : {
        "start" : 1615281970771,
        "stop" : 1615281971031,
        "duration" : 260
      }
    }, {
      "uid" : "ace4bfc10a9d8eb3",
      "status" : "broken",
      "statusDetails" : "requests.exceptions.SSLError: HTTPSConnectionPool(host='tgnew-test.icy.design', port=443): Max retries exceeded with url: /api/tg/admin.php?method=finance.getFormPaymentList (Caused by SSLError(SSLError(1, '[SSL: UNKNOWN_PROTOCOL] unknown protocol (_ssl.c:777)'),))",
      "time" : {
        "start" : 1615281938951,
        "stop" : 1615281938958,
        "duration" : 7
      }
    }, {
      "uid" : "8dbb180f3183b2df",
      "status" : "passed",
      "time" : {
        "start" : 1615269126352,
        "stop" : 1615269129689,
        "duration" : 3337
      }
    }, {
      "uid" : "b7e48c192468bcfb",
      "status" : "passed",
      "time" : {
        "start" : 1615262311122,
        "stop" : 1615262311380,
        "duration" : 258
      }
    }, {
      "uid" : "8cc7134819dbf306",
      "status" : "passed",
      "time" : {
        "start" : 1615199825703,
        "stop" : 1615199827283,
        "duration" : 1580
      }
    }, {
      "uid" : "888c1039219b35d8",
      "status" : "passed",
      "time" : {
        "start" : 1615199774184,
        "stop" : 1615199774469,
        "duration" : 285
      }
    }, {
      "uid" : "cec14d7926544104",
      "status" : "passed",
      "time" : {
        "start" : 1615199697296,
        "stop" : 1615199697594,
        "duration" : 298
      }
    }, {
      "uid" : "852b9bdb9b713baf",
      "status" : "passed",
      "time" : {
        "start" : 1615198945353,
        "stop" : 1615198945626,
        "duration" : 273
      }
    }, {
      "uid" : "c27bdde6f380ad16",
      "status" : "passed",
      "time" : {
        "start" : 1615198809017,
        "stop" : 1615198810795,
        "duration" : 1778
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "7dea5d95df70c763.json",
  "parameterValues" : [ ]
}