{
  "uid" : "9aac4b94b2f12b7c",
  "name" : "test_newly",
  "fullName" : "testcase.test_15.TestProcurementType#test_newly",
  "historyId" : "5fe638b7f66deae517520ca1c368ebcf",
  "time" : {
    "start" : 1616465392473,
    "stop" : 1616465392703,
    "duration" : 230
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
  "statusTrace" : "self = <test_15.TestProcurementType object at 0x0437F310>\n\n    def test_newly(self):\n        self.lab = gl.get_value('lab')\n        self.caseid = '%s-15' % (self.lab)\n        self.ip = gl.get_value('apiip')\n        self.testplanid = gl.get_value('test_plan_id')\n        self.token = gl.get_value('Cookie')\n    \n        # 测试API地址\n        self.url = '% smethod=finance.createPurchasePayment'% (self.ip)\n        print(self.url)\n        self.payloadData ={\n                            \"purchaseId\": 1556274479,\n                            \"supplierName\": \"花数果（wxn测试）\",\n                            \"bank\": \"工商银行\",\n                            \"account\": \"777777777777771\",\n                            \"stage\": 1,\n                            \"purchaseAmount\": 13000,\n                            \"amount\": 7800,\n                            \"payStyle\": \"6:2:2\",\n                            \"goodsList\": [],\n                            \"contents\": [{\n                                \"status\": 1,\n                                \"disable\": False,\n                                \"amount\": 7800\n                            }, {\n                                \"status\": 2,\n                                \"disable\": False,\n                                \"amount\": 2600,\n                                \"goodsList\": [{\n                                    \"skuId\": \"1552935991\",\n                                    \"spuId\": \"1540308832\",\n                                    \"sku\": \"2051F00061W402\",\n                                    \"spu\": \"2051F00061\",\n                                    \"name\": \"春2051F00061\",\n                                    \"count\": 6,\n                                    \"actualPrice\": 1000,\n                                    \"remainCount\": 6\n                                }, {\n                                    \"skuId\": \"1552936003\",\n                                    \"spuId\": \"1540308827\",\n                                    \"sku\": \"20510H0056W482\",\n                                    \"spu\": \"20510H0056\",\n                                    \"name\": \"summer20510H0056\",\n                                    \"count\": 7,\n                                    \"actualPrice\": 1000,\n                                    \"remainCount\": 7\n                                }]\n                            }, {\n                                \"status\": 3,\n                                \"disable\": False,\n                                \"amount\": 0\n                            }],\n                            \"style\": 4\n                        }\n    \n        self.payloadHeader = {\n            'Content-Type': \"application/json\",\n            'Cookie': self.token\n        }\n        #打印requests\n        self.data = json.dumps(self.payloadData)\n        self.headers = self.payloadHeader\n        ul.log.logger.info(\"%s is open!~~~~~~~~~~~~~~~~~~~~~~~~~~~~\" % (self.caseid))\n    \n        r = requests.request(\"POST\", url=self.url, headers=self.payloadHeader, data=self.data,verify=False)\n    \n        print(r.json())\n        ul.log.logger.info(r)\n    \n        # 断言\n>       assert r.json()['result'] == 0\nE       assert 10000 == 0\nE         +10000\nE         -0\n\ntestcase\\test_15.py:91: AssertionError",
  "flaky" : true,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
    "statusTrace" : "self = <test_15.TestProcurementType object at 0x0437F310>\n\n    def test_newly(self):\n        self.lab = gl.get_value('lab')\n        self.caseid = '%s-15' % (self.lab)\n        self.ip = gl.get_value('apiip')\n        self.testplanid = gl.get_value('test_plan_id')\n        self.token = gl.get_value('Cookie')\n    \n        # 测试API地址\n        self.url = '% smethod=finance.createPurchasePayment'% (self.ip)\n        print(self.url)\n        self.payloadData ={\n                            \"purchaseId\": 1556274479,\n                            \"supplierName\": \"花数果（wxn测试）\",\n                            \"bank\": \"工商银行\",\n                            \"account\": \"777777777777771\",\n                            \"stage\": 1,\n                            \"purchaseAmount\": 13000,\n                            \"amount\": 7800,\n                            \"payStyle\": \"6:2:2\",\n                            \"goodsList\": [],\n                            \"contents\": [{\n                                \"status\": 1,\n                                \"disable\": False,\n                                \"amount\": 7800\n                            }, {\n                                \"status\": 2,\n                                \"disable\": False,\n                                \"amount\": 2600,\n                                \"goodsList\": [{\n                                    \"skuId\": \"1552935991\",\n                                    \"spuId\": \"1540308832\",\n                                    \"sku\": \"2051F00061W402\",\n                                    \"spu\": \"2051F00061\",\n                                    \"name\": \"春2051F00061\",\n                                    \"count\": 6,\n                                    \"actualPrice\": 1000,\n                                    \"remainCount\": 6\n                                }, {\n                                    \"skuId\": \"1552936003\",\n                                    \"spuId\": \"1540308827\",\n                                    \"sku\": \"20510H0056W482\",\n                                    \"spu\": \"20510H0056\",\n                                    \"name\": \"summer20510H0056\",\n                                    \"count\": 7,\n                                    \"actualPrice\": 1000,\n                                    \"remainCount\": 7\n                                }]\n                            }, {\n                                \"status\": 3,\n                                \"disable\": False,\n                                \"amount\": 0\n                            }],\n                            \"style\": 4\n                        }\n    \n        self.payloadHeader = {\n            'Content-Type': \"application/json\",\n            'Cookie': self.token\n        }\n        #打印requests\n        self.data = json.dumps(self.payloadData)\n        self.headers = self.payloadHeader\n        ul.log.logger.info(\"%s is open!~~~~~~~~~~~~~~~~~~~~~~~~~~~~\" % (self.caseid))\n    \n        r = requests.request(\"POST\", url=self.url, headers=self.payloadHeader, data=self.data,verify=False)\n    \n        print(r.json())\n        ul.log.logger.info(r)\n    \n        # 断言\n>       assert r.json()['result'] == 0\nE       assert 10000 == 0\nE         +10000\nE         -0\n\ntestcase\\test_15.py:91: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "24131e5e32374459",
      "name" : "log",
      "source" : "24131e5e32374459.txt",
      "type" : "text/plain",
      "size" : 201
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "测试用例15"
  }, {
    "name" : "parentSuite",
    "value" : "testcase"
  }, {
    "name" : "suite",
    "value" : "test_15"
  }, {
    "name" : "subSuite",
    "value" : "TestProcurementType"
  }, {
    "name" : "host",
    "value" : "DESKTOP-JR3NDOU"
  }, {
    "name" : "thread",
    "value" : "217404-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.test_15"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "d74be09413acabf0",
      "status" : "broken",
      "statusDetails" : "requests.exceptions.SSLError: HTTPSConnectionPool(host='tgnew-test.icy.design', port=443): Max retries exceeded with url: /api/tg/admin.php?method=finance.createPurchasePayment (Caused by SSLError(SSLError(1, '[SSL: UNKNOWN_PROTOCOL] unknown protocol (_ssl.c:777)'),))",
      "time" : {
        "start" : 1616464825725,
        "stop" : 1616464825735,
        "duration" : 10
      }
    }, {
      "uid" : "72bbb32c7f9c5611",
      "status" : "broken",
      "statusDetails" : "requests.exceptions.SSLError: HTTPSConnectionPool(host='tgnew-test.icy.design', port=443): Max retries exceeded with url: /api/tg/admin.php?method=finance.createPurchasePayment (Caused by SSLError(SSLError(1, '[SSL: UNKNOWN_PROTOCOL] unknown protocol (_ssl.c:777)'),))",
      "time" : {
        "start" : 1616464031061,
        "stop" : 1616464031071,
        "duration" : 10
      }
    }, {
      "uid" : "9c9cd6a93acc6c6c",
      "status" : "passed",
      "time" : {
        "start" : 1615888321092,
        "stop" : 1615888321720,
        "duration" : 628
      }
    }, {
      "uid" : "afe40c1c0566cdc4",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 2 == 0\n  +2\n  -0",
      "time" : {
        "start" : 1615888162168,
        "stop" : 1615888162439,
        "duration" : 271
      }
    }, {
      "uid" : "1fb08f2d523238eb",
      "status" : "passed",
      "time" : {
        "start" : 1615861548788,
        "stop" : 1615861549689,
        "duration" : 901
      }
    }, {
      "uid" : "378bbe44c1de41c8",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 2 == 0\n  +2\n  -0",
      "time" : {
        "start" : 1615860547093,
        "stop" : 1615860547613,
        "duration" : 520
      }
    }, {
      "uid" : "55afe5ddec5d3f5e",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 2 == 0\n  +2\n  -0",
      "time" : {
        "start" : 1615859929166,
        "stop" : 1615859929699,
        "duration" : 533
      }
    }, {
      "uid" : "6b99d4000be9267f",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615286184767,
        "stop" : 1615286186152,
        "duration" : 1385
      }
    }, {
      "uid" : "c23ed8afa881c3fb",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615285803496,
        "stop" : 1615285805600,
        "duration" : 2104
      }
    }, {
      "uid" : "9b1da04fd32cec57",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615283533729,
        "stop" : 1615283533943,
        "duration" : 214
      }
    }, {
      "uid" : "3b815e76f681fc1e",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615283055820,
        "stop" : 1615283056089,
        "duration" : 269
      }
    }, {
      "uid" : "d98fa911cf34d4c1",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615282893619,
        "stop" : 1615282893825,
        "duration" : 206
      }
    }, {
      "uid" : "194da3770ba9f14",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615281971037,
        "stop" : 1615281972714,
        "duration" : 1677
      }
    }, {
      "uid" : "7d2e0e173c66763f",
      "status" : "broken",
      "statusDetails" : "requests.exceptions.SSLError: HTTPSConnectionPool(host='tgnew-test.icy.design', port=443): Max retries exceeded with url: /api/tg/admin.php?method=purchase.updateFormStatus (Caused by SSLError(SSLError(1, '[SSL: UNKNOWN_PROTOCOL] unknown protocol (_ssl.c:777)'),))",
      "time" : {
        "start" : 1615281939080,
        "stop" : 1615281939087,
        "duration" : 7
      }
    }, {
      "uid" : "3115ff44008a91e6",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615269129692,
        "stop" : 1615269129953,
        "duration" : 261
      }
    }, {
      "uid" : "a793592761a8ba3a",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615262311383,
        "stop" : 1615262311669,
        "duration" : 286
      }
    }, {
      "uid" : "b91eeb7c8660a033",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615199827288,
        "stop" : 1615199827517,
        "duration" : 229
      }
    }, {
      "uid" : "5bed275b6f094a4e",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615199774474,
        "stop" : 1615199775326,
        "duration" : 852
      }
    }, {
      "uid" : "8c8984797b4a039b",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 10000 == 0\n  +10000\n  -0",
      "time" : {
        "start" : 1615199697599,
        "stop" : 1615199697865,
        "duration" : 266
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "9aac4b94b2f12b7c.json",
  "parameterValues" : [ ]
}