{"name": "test_newly", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <test_007.TestProcurementType object at 0x04418610>\n\n    def test_newly(self):\n        self.lab = gl.get_value('lab')\n        self.caseid = '%s-007' % (self.lab)\n        self.ip = gl.get_value('apiip')\n        self.testplanid = gl.get_value('test_plan_id')\n        self.token = gl.get_value('Cookie')\n    \n        # 测试API地址\n        self.url = '% sgetPurchasePlanList&storeHouseId=&barcode=&page=1&pageSize=10&status=1'% (self.ip)\n        print(self.url)\n        self.payloadData ={\n    \n                        }\n    \n        self.payloadHeader = {\n            'Content-Type': \"application/json\",\n            'Cookie': self.token\n        }\n        #打印requests\n        self.data = json.dumps(self.payloadData)\n        self.headers = self.payloadHeader\n        ul.log.logger.info(\"%s is open!~~~~~~~~~~~~~~~~~~~~~~~~~~~~\" % (self.caseid))\n    \n        r = requests.request(\"post\", url=self.url, headers=self.payloadHeader, data=self.data,verify=False)\n    \n>       print(r.json())\n\ntest_007.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\requests\\models.py:900: in json\n    return complexjson.loads(self.text, **kwargs)\nC:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\json\\__init__.py:354: in loads\n    return _default_decoder.decode(s)\nC:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\json\\decoder.py:339: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x033D70D0>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nC:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\json\\decoder.py:357: JSONDecodeError"}, "attachments": [{"name": "log", "source": "d8549b5f-7cb6-4a5d-a8b2-7d853e8a7594-attachment.txt", "type": "text/plain"}], "start": 1615274510959, "stop": 1615274511386, "uuid": "356a21e5-992b-4164-b1db-cb87a9b868c2", "historyId": "065013b456f837d7627e287468494284", "testCaseId": "ccbc670689eb64f7f555600076a44ea6", "fullName": "testcase.test_007.TestProcurementType#test_newly", "labels": [{"name": "feature", "value": "测试用例007"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_007"}, {"name": "subSuite", "value": "TestProcurementType"}, {"name": "host", "value": "DESKTOP-JR3NDOU"}, {"name": "thread", "value": "70344-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_007"}]}