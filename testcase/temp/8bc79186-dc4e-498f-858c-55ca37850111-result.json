{"name": "test_newly", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <test_08.TestProcurementType object at 0x04720990>\n\n    def test_newly(self):\n        self.lab = gl.get_value('lab')\n        self.caseid = '%s-08' % (self.lab)\n        self.ip = gl.get_value('apiip')\n        self.testplanid = gl.get_value('test_plan_id')\n        self.token = gl.get_value('Cookie')\n        self.id = self.id = ReadExtract().read_extract()['id']\n        self.merchandiserId = self.id = ReadExtract().read_extract()['merchandiserId']\n        print(self.id)\n    \n        # 测试API地址\n        self.url = '% smethod=purchase.updatePurchaseForm'% (self.ip)\n        print(self.url)\n        self.payloadData ={\n                            \"supplierId\":1539844984,\n                            \"supplierName\":\"ODM类型测试供应商\",\n                            \"merchandiserId\": self.merchandiserId,\n                            \"onNewSample\":0,\n                            \"purchaseTypeName\":\"ODM\",\n                            \"remark\":\"\",\n                            \"purchaseTypeId\":1547608649,\n                            \"settlementCycleId\":1547605853,\n                            \"settlementCycleName\":\"3/6/1\",\n                            \"taxRateId\":1547603037,\n                            \"taxRateName\":\"13\",\n                            \"merchandiserName\":\"供应链老大\",\n                            \"goodsList\":[\n                                {\n                                    \"id\": self.id,\n                                    \"name\":\"测试-测试商品\",\n                                    \"imgList\":[\n                                        \"ai-admin/1ab5404172d424aa2f1cfc1696fb1695.jpg\"\n                                    ],\n                                    \"img\":\"ai-admin/1ab5404172d424aa2f1cfc1696fb1695.jpg\",\n                                    \"colorName\":\"中灰\",\n                                    \"spuBarcode\":\"19160A0011\",\n                                    \"skuBarcode\": \"1922A10009W703\",\n                                    \"unitName\":\"件\",\n                                    \"writeOffPrice\":\"\",\n                                    \"hangTagPrice\":\"3242.00\",\n                                    \"sizeName\":\"M\",\n                                    \"sizeAndColor\":\"中灰 ,M\",\n                                    \"saleChannelName\":\"电商销售\",\n                                    \"purchaseGenreName\":\"首单\",\n                                    \"bandName\":\"\",\n                                    \"purchaseTypeName\":\"只拿\",\n                                    \"storeHouseName\":\"研发测试仓\",\n                                    \"storeHouseId\":3,\n                                    \"isOre\":0,\n                                    \"purchaseCount\":60,\n                                    \"onlineCount\":0,\n                                    \"offlineCount\":0,\n                                    \"supplierId\":1539844984,\n                                    \"supplierName\":\"ODM类型测试供应商\",\n                                    \"merchandiserId\":1607068302,\n                                    \"merchandiserName\":\"供应链老大\",\n                                    \"arriveCount\":0,\n                                    \"offlineAndOnlineCount\":\"0/0\",\n                                    \"oreArriveCount\":\"0/0\",\n                                    \"offlineAndOnlineArriveCount\":\"0/0\",\n                                    \"bandArriveDate\":\"2021-03-11\",\n                                    \"creator\":\"COO\",\n                                    \"createTime\":\"2021-03-08\",\n                                    \"remark\":\"巴拉巴拉吧\",\n                                    \"status\":1,\n                                    \"estimatedPurchaseAmount\":\"0.0000\",\n                                    \"image\":\"ai-admin/1ab5404172d424aa2f1cfc1696fb1695.jpg\",\n                                    \"unitPrice\":\"222.0000\",\n                                    \"totalAmount\":\"13320.00\",\n                                    \"operateArriveDate\":\"2021-03-08T16:00:00.000Z\"\n                                }\n                            ],\n                            \"isOre\":1,\n                            \"storeHouseId\":3\n                        }\n    \n        self.payloadHeader = {\n            'Content-Type': \"application/json\",\n            'Cookie': self.token\n        }\n        #打印requests\n        self.data = json.dumps(self.payloadData)\n        self.headers = self.payloadHeader\n        ul.log.logger.info(\"%s is open!~~~~~~~~~~~~~~~~~~~~~~~~~~~~\" % (self.caseid))\n    \n        r = requests.request(\"post\", url=self.url, headers=self.payloadHeader, data=self.data,verify=False)\n    \n>       print(r.json())\n\ntest_08.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\requests\\models.py:900: in json\n    return complexjson.loads(self.text, **kwargs)\nC:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\json\\__init__.py:354: in loads\n    return _default_decoder.decode(s)\nC:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\json\\decoder.py:339: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x03692310>\ns = 'Data_InputData Object\\n(\\n    [data] => Array\\n        (\\n            [method] => purchase.updatePurchaseForm\\n      ...n            [adminUserId] => undefined\\n            [PHPSESSID] => 54ff737bf5f78b6c0fb9c8e43c8d0236\\n        )\\n\\n)\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nC:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\json\\decoder.py:357: JSONDecodeError"}, "attachments": [{"name": "log", "source": "64acba12-46d3-445e-a9ca-09b2d5675c15-attachment.txt", "type": "text/plain"}], "start": 1615280439639, "stop": 1615280440074, "uuid": "41de5294-4106-4f59-83b7-8cd0faa28e9f", "historyId": "1b618fc3f20489e5ef94ac52379b37b0", "testCaseId": "cbbebec05fae05f1a976d74b1e4a5e25", "fullName": "testcase.test_08.TestProcurementType#test_newly", "labels": [{"name": "feature", "value": "测试用例8"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_08"}, {"name": "subSuite", "value": "TestProcurementType"}, {"name": "host", "value": "DESKTOP-JR3NDOU"}, {"name": "thread", "value": "64104-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_08"}]}