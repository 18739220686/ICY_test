{"name": "test_newly", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <test_05.TestProcurementType object at 0x046C8730>\n\n    def test_newly(self):\n        self.lab = gl.get_value('lab')\n        self.caseid = '%s-05' % (self.lab)\n        self.ip = gl.get_value('apiip')\n        self.testplanid = gl.get_value('test_plan_id')\n        self.token = gl.get_value('Cookie')\n        self.supplierId = self.id = ReadExtract().read_extract()['supplierId']\n        print(self.supplierId)\n    \n        # 测试API地址\n        self.url = '% smethod=supplierV3.getSupplierDetail&supplierId={{self.supplierId}}'% (self.ip)\n        # = self.url+self.supplierId\n    \n        print(self.url)\n        self.payloadData ={\n                    }\n    \n        self.payloadHeader = {\n            'Content-Type': \"application/json\",\n            'Cookie': self.token\n        }\n        #打印requests\n        self.data = json.dumps(self.payloadData)\n        self.headers = self.payloadHeader\n        ul.log.logger.info(\"%s is open!~~~~~~~~~~~~~~~~~~~~~~~~~~~~\" % (self.caseid))\n    \n        r = requests.request(\"get\", url=self.url, headers=self.payloadHeader, data=self.data,verify=False)\n    \n>       print(r.json())\n\ntest_05.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\requests\\models.py:900: in json\n    return complexjson.loads(self.text, **kwargs)\nC:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\json\\__init__.py:354: in loads\n    return _default_decoder.decode(s)\nC:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\json\\decoder.py:339: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x03627110>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nC:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\json\\decoder.py:357: JSONDecodeError"}, "attachments": [{"name": "log", "source": "ac9d2d80-c555-42c0-aea8-be82fac5ba33-attachment.txt", "type": "text/plain"}], "start": 1615258492265, "stop": 1615258492683, "uuid": "06b0fa74-e106-46ba-81f8-560457ad6410", "historyId": "428fd0b8d6f2944ddc88e582ce0f1e5b", "testCaseId": "37cac1bf8e4bae65dbd02efa55192738", "fullName": "testcase.test_05.TestProcurementType#test_newly", "labels": [{"name": "feature", "value": "测试用例5"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_05"}, {"name": "subSuite", "value": "TestProcurementType"}, {"name": "host", "value": "DESKTOP-JR3NDOU"}, {"name": "thread", "value": "60828-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_05"}]}